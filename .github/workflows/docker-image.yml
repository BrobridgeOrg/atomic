name: Docker Image CI

on:
  push:
    #tags: [ '*' ]
    branches: [ 'main' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}      

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to the Container registry
      uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5.5.1
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          #type=ref,event=tag
          #type=semver,pattern={{raw}}
          #type=sha,prefix=
          type=raw,value=v0.0.5-{{date 'YYYYMMDD'}}-ubi
          latest

    - name: Build and push Docker image
      uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
      with:
        context: .
        file: ./build/docker/Dockerfile.ubi
        push: true
        tags: ${{ steps.meta.outputs.tags }}

  scan-image:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    outputs:
      trivy_report: ${{ steps.upload-trivy-report.outputs.trivy_report }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to the Container registry
      uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set lowercase image name
      id: set-image-name
      run: echo "LOWERCASE_IMAGE_NAME=${{ env.REGISTRY }}/$(echo ${{ env.IMAGE_NAME }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Pull Image
      run: |
        docker pull ${{ env.LOWERCASE_IMAGE_NAME }}:latest

    - name: Scan Docker image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.LOWERCASE_IMAGE_NAME }}:latest
        format: 'table'
        output: 'trivy-report.txt'

    - name: Upload Trivy report
      id: upload-trivy-report
      run: |
        report=$(cat trivy-report.txt)
        echo "::set-output name=trivy_report::$report"

  notification-discord:
    runs-on: ubuntu-latest
    needs: scan-image
    steps:
    - name: Discord notification
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      uses: Ilshidur/action-discord@master
      with:
        args: |
          The project {{ EVENT_PAYLOAD.repository.full_name }} has been builded.
          scan-report: ```{{ needs.scan-image.outputs.trivy_report }}```
          image: **{{ needs.build-and-push-image.outputs.tags }}**
